" General configuration
" set nocompatible
"
" IMPORTANT : To work nicely with your dotfiles from github:
"   - Add these two lines to your .vimr or _vimrc file :
"
"     let $MYVIMRC='<path_to_your_github_vimrc_file>'
"     source <path_to_your_github_vimrc_file>
"

"-----------------------------------------------------------------------------
" Functions
"-----------------------------------------------------------------------------
function! FT_load_plugins()
  "vim-plug

  "Check first is vim-plug is installed
  "Credit : https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation

  if !has("win32")
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  endif

  if !has("compatible")
    call plug#begin('~/vimfiles/vim-plug')

    Plug 'scrooloose/nerdcommenter'
    "Plug 'https://github.com/vim-syntastic/syntastic.git'
    "Plug 'https://github.com/suoto/vim-hdl.git'
    Plug 'https://github.com/vim-scripts/VIP.git'
    "Plug 'w0rp/ale'
    Plug 'https://github.com/lifepillar/vim-solarized8'
    " Initialize plugin system
    call plug#end()
  endif

endfunction

function! FT_python()
    call FT_spc_cfg()
    set tabstop=4
    set shiftwidth=4
    set expandtab
    setlocal complete-=i
    setlocal complete-=t
"    nmap <silent> ;c :.s/^./#&/g<CR>
    iabbr ewip #           ^
            \<CR>#          /\|\
            \<CR>#           \|
            \<CR>#  END WIP  \|
    iabbr wip #  WIP      \|
            \<CR>#           \|
            \<CR>#          \\|/
            \<CR>#           v
endfunction

function! FT_sysverilog()
    call FT_spc_cfg()
    set textwidth=100
    set tabstop=2
    set shiftwidth=2
    set expandtab
    set suffixesadd+=.vhd
    set suffixesadd+=.sv
    set suffixesadd+=.v
    imap <buffer> <C-e>P <Esc>i  always_ff @(posedge clk) begin <CR><+code+><CR>if (!rst_n) begin<CR><+reset_registers+>;<CR>end<CR>end<Esc>4k$4hi
    imap <buffer> <C-e>R <Esc>i  always_ff @(posedge clk or negedge rst_n) begin : <label><CR>if (rst_n == 1'b0) begin<CR><+reset_registers+>;<CR>end<CR>else begin<CR><+code+><CR>end<CR>end : <label><Esc>6k$4hi
    nnoremap ,uvf 0i  function new(string name = "", uvm_component parent);<CR>super.new(name, parent);<CR>endfunction : new<Esc>ko
    nnoremap ,uvb 0i  function void build_phase(uvm_phase phase);<CR>super.build_phase(phase);<CR>endfunction : build_phase<Esc>ko
    nnoremap ,uvt 0i  task run_phase(uvm_phase phase);<CR>forever begin : forever_loop<CR>end : forever_loop<CR>endtask : run_phase<Esc>3ko
    nnoremap ,vmod i<C-R>=expand("%:t:r")<CR><Esc>bdiw:-1read $HOME/github/dotfiles/vim/vimfiles/code_templates/sv_module.sv<CR>:%s/module_name_/<C-R>"/g<CR>:%s/_date_/<C-R>=strftime("%d\\/%m\\/%y")<CR>/g<CR>1G/module<CR>
    iabbr ewip //          ^
            \<CR>//         /\|\
            \<CR>//          \|
            \<CR>// END WIP  \|
    iabbr wip // WIP      \|
            \<CR>//          \|
            \<CR>//         \\|/
            \<CR>//          v
    imap <buffer> ,, <=
    iabbr ac always_comb
    iabbr af always_ff
    iabbr lo logic
endfunction

function! FT_vhdl()
    call FT_spc_cfg()
    filetype plugin indent on
    "Avoid alignment to parenthesis
    let g:vhdl_indent_genportmap = 0
    set tabstop=2
    set shiftwidth=2
    set expandtab
    set suffixesadd+=.vhd
    set suffixesadd+=.sv
    set suffixesadd+=.v
    "setlocal omnifunc=syntaxcomplete#Complete
    imap <buffer> <C-e>c case  is<CR>when <+state1+> =><CR><+action1+><CR>when <+state2+> =><CR><+action2+><CR>when others => null;<CR>end case;<Esc>6k$2hi
    imap <buffer> <C-e>e <Esc>bdwientity <Esc>pa is<CR>end entity ;<Esc>POport (<CR>);<Esc>O
    imap <buffer> <C-e>a <Esc>b"zdwiarchitecture <Esc>pa of <Esc>mz?entity<CR>wyw`zpa is<CR>begin<CR>end architecture ;<Esc>"zPO
    imap <buffer> <C-e>p <Esc>bywA : process ()<CR>begin<CR>end process ;<Esc>PO<+process body+><Esc>?)<CR>i
    imap <buffer> <C-e>F <Esc>bdiw function <C-R>"  (<CR>)<CR> return <++ret++> is<CR>begin<CR>end <C-R>";<Esc>5kA
    imap <buffer> <C-e>k <Esc>bdwipackage <Esc>pa is<CR><BS>end package ;<Esc>PO
    imap <buffer> <C-e>i if  then<CR><+do_something+>;<CR>elsif <+condition2+> then<CR><+do_something_else+>;<CR>else<CR><+do_something_else+>;<CR>end if;<Esc>6k$4hi
    imap <buffer> <C-e>P <Esc>bywA : process(CLK)<CR>begin<CR>if rising_edge(CLK) then<CR>if RST = '1' then<CR><+reset_registers+>;<CR>else<CR><+do_sth+>;<CR>end if;<CR>end if;<CR>end process <Esc>pA;<Esc>5k$18hi
    imap <buffer> <C-e>E <Esc>bywA : process(i_clk)<CR>begin<CR>if rising_edge(i_clk) then<CR><+do_sth+>;<CR>if i_rst = '1' then<CR><+reset_registers+>;<CR>end if;<CR>end if;<CR>end process <Esc>pA;<Esc>4k$18hi
    imap <buffer> <C-e>g <Esc>bywA : for k in 0 to <+end+> - 1 generate<CR>begin<CR><+concurrent+>;<CR>end generate <Esc>pA;<Esc>3k$20hi
    imap <buffer> ,, <=
    imap <buffer> .. =>
    imap <buffer> I: I : in
    imap <buffer> O: O : out
    nnoremap ,vmod i<C-R>=expand("%:t:r")<CR><Esc>bdiw:-1read $HOME/github/dotfiles/vim/vimfiles/code_templates/vhdl_module.vhd<CR>:%s/module_name_/<C-R>"/g<CR>:%s/_date_/<C-R>=strftime("%d\\/%m\\/%y")<CR>/g<CR>1G/entity<CR>
    "nnoremap ,vprc :-1read $HOME/vimfiles/code_templates/vhdl_procedure_clocked.vhd<CR>4jO
    "nnoremap ,vpr :-1read $HOME/vimfiles/code_templates/vhdl_procedure.vhd<CR>2jO
    iabbr dt downto
    iabbr sig signal
    iabbr gen generate
    iabbr ot others
    iabbr sl std_logic
    iabbr slv std_logic_vector
    iabbr uns unsigned
    iabbr toi to_integer
    iabbr tos to_signed
    iabbr tou to_unsigned
    iabbr com component
    iabbr ent entity
    iabbr arc architecture
    iabbr ewip --          ^
            \<CR>--         /\|\
            \<CR>--          \|
            \<CR>-- END WIP  \|
    iabbr wip -- WIP      \|
            \<CR>--          \|
            \<CR>--         \\|/
            \<CR>--          v
endfunction

function! FT_ucf()
    set tabstop=2
    set shiftwidth=2
    set expandtab
    nmap <silent> ;c :.s/^./#&/g<CR>:noh<CR>
    iabbr ewip #-          ^
            \<CR>#-         /\|\
            \<CR>#-          \|
            \<CR>#- END WIP  \|
    iabbr wip #- WIP      \|
            \<CR>#-          \|
            \<CR>#-         \\|/
            \<CR>#-          v
endfunction

function FT_trim_trailing_spc()
  %s/\s\+$//e
  ''
endfunction

function! FT_spc_cfg()
    set list listchars=trail:.,extends:>
    autocmd FileWritePre * call FT_trim_trailing_spc()
    autocmd FileAppendPre * call FT_trim_trailing_spc()
    autocmd FilterWritePre * call FT_trim_trailing_spc()
    autocmd BufWritePre * call FT_trim_trailing_spc()
endfunction

function! FT_netrw_cfg()
  "netrw configs
  " from : https://shapeshed.com/vim-netrw/
  let g:netrw_banner = 0
  let g:netrw_liststyle = 3
  "let g:netrw_browse_split = 4
  "let g:netrw_altv = 1
  let g:netrw_winsize = 25
endfunction

function! FT_gui_cfg()
  " GUI and graphical stuff
  if &term =~ "xterm"
    " 256 colors
    let &t_Co = 256
    " restore screen after quitting
    let &t_ti = "\<Esc>7\<Esc>[r\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l\<Esc>8"
    if has("terminfo")
      let &t_Sf = "\<Esc>[3%p1%dm"
      let &t_Sb = "\<Esc>[4%p1%dm"
    else
      let &t_Sf = "\<Esc>[3%dm"
      let &t_Sb = "\<Esc>[4%dm"
    endif
  endif
endfunction

function! FT_syntastic_cfg()
  " Syntastic CFG
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list  = 1
  let g:syntastic_auto_loc_list             = 1
  let g:syntastic_check_on_open             = 0
  let g:syntastic_check_on_wq               = 0

  ALE CFG
  let g:ale_sign_column_always = 1
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  let g:ale_linters = {
        \ 'vhdl': ['vcom'],
        \}
endfunction

function! FT_colorsch_cfg()
  "colorscheme desert
  if has("win32")
    set path=$PWD\\**
    set background=dark
    colorscheme lucius
    set guifont=Courier\ New:h10
    "set guifont=Roboto\ Mono\ Regular:h10
    "set guifont=Lucida\ Console:h9
  else
    "set t_Co=256
    "This is needed in WSL
    set path=$PWD/**
    set t_ut=
    set background=dark
    "colorscheme lucius
    colorscheme solarized8
    "set guifont=Courier\ New:h10
    "Use Monospace for CITRIX remote sessions
    "set guifont=Lucida\ Console
    set guifont=Monospace\ 10
  endif
endfunction

function! FT_ruler_cfg()
  set noruler
  set laststatus=2
  set statusline=%t                                         " Tail of the filename
  set statusline+=[%{strlen(&fenc)?&fenc:'none'},%{&ff}]    " file encoding and format
  set statusline+=%h%m%r%y                                  " File flags (help, modified,ro,ftype)
  set statusline+=%=                                        " Left/right separator
  set statusline+=%c,%l/%L                                  " Column, line and total number of lines
endfunction

function! FT_general_settings()
  set langmenu=en_US.UTF-8
  set ff=unix
  set fileformats=unix,dos
  language messages en_US.UTF-8
  syntax on
  if v:version >= 800
    set wildmenu
    set ssop-=options " don't store global or local values in a session
    set ssop-=folds " don't store folds
  endif
  set tabstop=2
  set shiftwidth=2
  set expandtab
  set hlsearch
  set nowrap
  set number
  set ignorecase
  filetype plugin on
  filetype indent on
  set go-=T
  set go-=m
endfunction

function! FT_common_mappings()
  " Mappings and abbr
  nnoremap ,date :%s/_date_/<C-R>=strftime("%d\\/%m\\/%y")<CR>/g<CR>
  iabbr dts_ <C-R>=strftime("%d/%m/%y")<CR>
endfunction

"-----------------------------------------------------------------------------
" Initialization
"-----------------------------------------------------------------------------

let mapleader = ","

call FT_general_settings()
call FT_ruler_cfg()
call FT_load_plugins()
"call FT_syntastic_cfg()
"call FT_gui_cfg()
call FT_netrw_cfg()
call FT_colorsch_cfg()
call FT_common_mappings()

" Configurations particularized
if has("autocmd")
    " filetype plugin indent on
    " filetype dependent settings
    au Filetype vhdl call FT_vhdl()
    au Filetype python call FT_python()
    au Filetype ucf call FT_ucf()
    au Filetype systemverilog call FT_sysverilog()
else
    set autoindent
endif
